# Just a record type

%rec: Atest

# A record type with a URL

%rec: Atest https://docs.pytest.org/en/latest/

# A documentation string

%doc: This is just a test record config

# Multiline documentation string

%doc: This is just a test record config
+ which spans multiple lines

# Mandatory Fields

%mandatory: Foo Bar Baz

# Unique Fields

%unique: Foo Bar Baz

# A (single) Primary Key Field

%key: Foo

# Allowed Fields

%allowed: Foo Bar Baz

# Prohibited Fields

%prohibit: Foo Bar Baz

# An exact size constraint

%size: 37

# A size constraint with a less than range

%size: < 75

# A size constraint with a less than or equal to range

%size: <= 41

# A size constraint with a greater than range

%size: > 82

# A size constraint with a greater than or equal to range

%size: >= 907

# A size constraint with a hexadecimal value

%size: <= 0x7C2

# Fields to sort by

%sort: Foo Bar Baz

# A field directly typed int

%type: Foo int

# Multiple fields directly typed int

%type: Foo,Bar int

# A custom type that maps to int

%typedef: int_type int

# A field using a custom type that maps to int

%typedef: int_type int
%type: Foo int_type

# Multiple fields using a custom type that maps to int

%typedef: int_type int
%type: Foo,Bar int_type

# A field directly typed real

%type: Foo real

# Multiple fields directly typed real

%type: Foo,Bar real

# A custom type that maps to real

%typedef: real_type real

# A field using a custom type that maps to real

%typedef: real_type real
%type: Foo real_type

# Multiple fields using a custom type that maps to real

%typedef: real_type real
%type: Foo,Bar real_type

# A field directly typed line

%type: Foo line

# Multiple fields directly typed line

%type: Foo,Bar line

# A custom type that maps to line

%typedef: line_type line

# A field using a custom type that maps to line

%typedef: line_type line
%type: Foo line_type

# Multiple fields using a custom type that maps to line

%typedef: line_type line
%type: Foo,Bar line_type

# A field directly typed bool

%type: Foo bool

# Multiple fields directly typed bool

%type: Foo,Bar bool

# A custom type that maps to bool

%typedef: bool_type bool

# A field using a custom type that maps to bool

%typedef: bool_type bool
%type: Foo bool_type

# Multiple fields using a custom type that maps to bool

%typedef: bool_type bool
%type: Foo,Bar bool_type

# A field directly typed date

%type: Foo date

# Multiple fields directly typed date

%type: Foo,Bar date

# A custom type that maps to date

%typedef: date_type date

# A field using a custom type that maps to date

%typedef: date_type date
%type: Foo date_type

# Multiple fields using a custom type that maps to date

%typedef: date_type date
%type: Foo,Bar date_type

# A field directly typed range

%type: Foo range MIN 7

# A field directly typed range (with negative values)

%type: Foo range -17 -2

# Multiple fields directly typed range

%type: Foo,Bar range 0x7A

# A custom type that maps to range

%typedef: range_type range 5 MAX

# A field using a custom type that maps to range

%typedef: range_type range 71
%type: Foo range_type

# Multiple fields using a custom type that maps to range

%typedef: range_type range -0x8E MAX
%type: Foo,Bar range_type

# A field directly typed enum

%type: Foo enum foo bar baz

# Multiple fields directly typed enum (with comments)

%type: Foo,Bar enum
+ foo (The first option)
+ bar (The second option)
+ baz (The third option)

# A custom type that maps to enum (multiline)

%typedef: enum_type enum foo
+ bar
+ baz

# A field using a custom type that maps to enum

%typedef: enum_type enum foo bar baz
%type: Foo enum_type

# Multiple fields using a custom type that maps to enum (with comments)

%typedef: enum_type enum
+ foo (The first option)
+ bar (The second option)
+ baz (The third option)
%type: Foo,Bar enum_type

# A field directly typed regexp

%type: Foo regexp /[0-9]{5}/

# A regexp pattern using different border characters

%type: Foo regexp /[0-9]{5}/
%type: Bar regexp *[0-9]{5}*
%type: Baz regexp |[0-9]{5}|
%type: Bam regexp +[0-9]{5}+
%type: Zam regexp `[0-9]{5}`

# Multiple fields directly typed regexp

%type: Foo,Bar regexp /[a-zA-Z]{7}/

# A custom type that maps to regexp

%typedef: regexp_type regexp /[a-zA-Z0-9_]{13}/

# A field using a custom type that maps to regexp

%typedef: regexp_type regexp /[0-9]{8}-[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{12}/
%type: Foo regexp_type

# Multiple fields using a custom type that maps to regexp

%typedef: regexp_type regexp /[0-9]{3}-[0-9]{2}-[0-9]{4}/
%type: Foo,Bar regexp_type

# Link multiple levels of custom types together

%typedef: custom_type_1 int
%typedef: custom_type_2 custom_type_1
%typedef: custom_type_3 custom_type_2
%typedef: custom_type_4 custom_type_3
%typedef: custom_type_5 custom_type_4
%typedef: custom_type_6 custom_type_5
%typedef: custom_type_7 custom_type_6
%typedef: custom_type_8 custom_type_7
%typedef: custom_type_9 custom_type_8
%type: Foo custom_type_9

# Auto-Generate an int field typed directly

%type: Foo int
%auto: Foo

# Auto-Generate an int field typed indirectly

%typedef: foo_type int
%type: Foo foo_type
%auto: Foo

# Auto-Generate a uuid field typed directly

%type: Foo uuid
%auto: Foo

# Auto-Generate a uuid field typed indirectly

%typedef: foo_type uuid
%type: Foo foo_type
%auto: Foo

# Auto-Generate a date field typed directly

%type: Foo date
%auto: Foo

# Auto-Generate a date field typed indirectly

%typedef: foo_type date
%type: Foo foo_type
%auto: Foo

# Auto-generate multiple fields

%type: IntDirect int
%typedef: int_type int
%type: IntIndirect int_type
%type: UuidDirect uuid
%typedef: uuid_type uuid
%type: UuidIndirect uuid_type
%type: DateDirect date
%typedef: date_type date
%type: DateIndirect date_type
%auto: IntDirect IntIndirect UuidDirect UuidIndirect DateDirect DateIndirect

# A full example

%rec: Book
%mandatory: Title
%unique: Location
%key: Id
%allowed: Id Title Author Publisher Location Pages Rating DateFinished WasGood DateAcquired BookId Untyped
%prohibit: Review
%size: <= 100
%typedef: id_type int
%type: Id id_type
%typedef: title_type line
%type: Title title_type
%typedef: author_type size 100
%type: Author author_type
%typedef: publisher_type line
%type: Publisher publisher_type
%typedef: location_type enum
+ loaned (Out on credit)
+ home (It's literally on my bookshelf right now)
+ unknown (No idea)
%type: Location location_type
%typedef: pages_type range 1 MAX
%type: Pages pages_type
%typedef: rating_type real
%type: Rating rating_type
%typedef: date_finished_type date
%type: DateFinished date_finished_type
%type: DateAcquired date
%typedef: was_good_type bool
%type: WasGood was_good_type
%typedef: book_id_type regexp /[0-9]{9}[a-zA-Z]/
%type: BookId book_id_type
%auto: DateAcquired Id
%sort: Author Title
%doc: Each record in this record set represents
+ a book in my personal collection.
